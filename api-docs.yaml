openapi: 3.1.0
info:
  title: Manage tickets APIs
  description: APIs for manage tickets.
  version: 1.0.0
servers:
- url: http://localhost:8080/api
  description: Local development server
- url: http://localhost:8080/api
  description: Production server
tags:
- name: Audit log
  description: Manage audit logs
- name: Auth
  description: Manage the auth
- name: User
  description: Manage users
- name: Ticket
  description: Manage Tickets
paths:
  /v1/tickets:
    get:
      tags:
      - Ticket
      summary: Get all tickets
      description: Fetch all tickets
      operationId: getAllTickets
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        required: false
        schema:
          type: array
          default:
          - title
          - DESC
          items:
            type: string
      responses:
        "200":
          description: Ticket successfully fetched
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedModel"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionResponse"
    put:
      tags:
      - Ticket
      summary: Save or update tickets
      description: Save or update by Id tickets
      operationId: createOrUpdateTicket
      parameters:
      - name: id
        in: query
        required: false
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TicketDto"
        required: true
      responses:
        "200":
          description: Ticket successfully updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TicketDto"
        "201":
          description: Ticket successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TicketDto"
        "409":
          description: The ticket already exists by id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionResponse"
        "400":
          description: Bad request for auth
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionResponse"
  /v1/users:
    get:
      tags:
      - User
      summary: Get All user
      description: "Fetch all user with page, size and sorted"
      operationId: getAllUsers
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        required: false
        schema:
          type: array
          default:
          - username
          - DESC
          items:
            type: string
      responses:
        "200":
          description: Successfully users fetched
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedModel"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionResponse"
    post:
      tags:
      - User
      summary: Create new user
      description: Register new user
      operationId: registerUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequestDto"
        required: true
      responses:
        "201":
          description: User successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDto"
        "409":
          description: The password don't matcher
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionResponse"
  /v1/auth/logout:
    post:
      tags:
      - Auth
      summary: Logout
      description: User logout
      operationId: logout
      responses:
        "200":
          description: Logout successfully
          content:
            '*/*':
              schema:
                type: string
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionResponse"
  /v1/auth/login:
    post:
      tags:
      - Auth
      summary: Login
      description: User login by username and password
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequestDto"
        required: true
      responses:
        "200":
          description: Login successfully
          content:
            '*/*':
              schema:
                type: object
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionResponse"
  /v1/tickets/{id}:
    patch:
      tags:
      - Ticket
      summary: Change ticket status
      description: Change ticket status by id
      operationId: updateTicketStatus
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: status
        in: query
        required: true
        schema:
          type: string
          enum:
          - NEW
          - IN_PROGRESS
          - RESOLVED
      responses:
        "200":
          description: Status successfully changed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TicketDto"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionResponse"
  /v1/tickets/user:
    get:
      tags:
      - Ticket
      summary: Get tickets by user
      description: Fetch tickets user
      operationId: getAllTicketsByUser
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        required: false
        schema:
          type: array
          default:
          - title
          - DESC
          items:
            type: string
      responses:
        "200":
          description: Ticket successfully fetched
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedModel"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionResponse"
  /v1/tickets/search:
    get:
      tags:
      - Ticket
      summary: Search & filter
      description: Search & filter by ticket id and status
      operationId: searchAndFilter
      parameters:
      - name: ticketId
        in: query
        required: true
        schema:
          type: string
      - name: status
        in: query
        required: true
        schema:
          type: string
          enum:
          - NEW
          - IN_PROGRESS
          - RESOLVED
      responses:
        "200":
          description: Tickets successfully found
          content:
            application/json:
              schema:
                type: string
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionResponse"
  /v1/auth/me:
    get:
      tags:
      - Auth
      summary: Get user authenticated info
      description: "Get user authenticated info like: username, role"
      operationId: getCurrentUser
      responses:
        "200":
          description: Get user successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionResponse"
  /v1/auditLogs:
    get:
      tags:
      - Audit log
      summary: Get all audit logs
      description: Fetch all audit logs
      operationId: getAllAuditLogs
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        required: false
        schema:
          type: array
          default:
          - action
          - DESC
          items:
            type: string
      responses:
        "200":
          description: Audi logs successfully fetched
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedModel"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionResponse"
components:
  schemas:
    TicketDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        ticketId:
          type: string
        title:
          type: string
        description:
          type: string
        priority:
          type: string
          enum:
          - LOW
          - MEDIUM
          - HIGH
        category:
          type: string
          enum:
          - NETWORK
          - HARDWARE
          - SOFTWARE
          - OTHER
        status:
          type: string
          enum:
          - NEW
          - IN_PROGRESS
          - RESOLVED
        createdAt:
          type: string
          format: date-time
    ExceptionResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        error:
          type: string
        errorMessage:
          type: string
        timestamp:
          type: string
          format: date-time
    UserDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        role:
          type: string
          enum:
          - EMPLOYEE
          - IT_SUPPORT
    RegisterRequestDto:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        confirmPassword:
          type: string
        role:
          type: string
          enum:
          - EMPLOYEE
          - IT_SUPPORT
    LoginRequestDto:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    PageMetadata:
      type: object
      properties:
        size:
          type: integer
          format: int64
        number:
          type: integer
          format: int64
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int64
    PagedModel:
      type: object
      properties:
        content:
          type: array
          items:
            type: object
        page:
          $ref: "#/components/schemas/PageMetadata"
    GrantedAuthority:
      type: object
      properties:
        authority:
          type: string
    User:
      type: object
      properties:
        password:
          type: string
        username:
          type: string
        authorities:
          type: array
          items:
            $ref: "#/components/schemas/GrantedAuthority"
        accountNonExpired:
          type: boolean
        accountNonLocked:
          type: boolean
        credentialsNonExpired:
          type: boolean
        enabled:
          type: boolean
